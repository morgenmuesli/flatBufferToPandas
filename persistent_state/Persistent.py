# automatically generated by the FlatBuffers compiler, do not modify

# namespace: persistent_state

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Persistent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Persistent()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsPersistent(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Persistent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Persistent
    def SumLat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Persistent
    def SumLon(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # Persistent
    def Counter(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def PersistentStart(builder): builder.StartObject(3)
def Start(builder):
    return PersistentStart(builder)
def PersistentAddSumLat(builder, sumLat): builder.PrependFloat64Slot(0, sumLat, 0.0)
def AddSumLat(builder, sumLat):
    return PersistentAddSumLat(builder, sumLat)
def PersistentAddSumLon(builder, sumLon): builder.PrependFloat64Slot(1, sumLon, 0.0)
def AddSumLon(builder, sumLon):
    return PersistentAddSumLon(builder, sumLon)
def PersistentAddCounter(builder, counter): builder.PrependInt32Slot(2, counter, 0)
def AddCounter(builder, counter):
    return PersistentAddCounter(builder, counter)
def PersistentEnd(builder): return builder.EndObject()
def End(builder):
    return PersistentEnd(builder)