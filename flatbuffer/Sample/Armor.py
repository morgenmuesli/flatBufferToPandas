# automatically generated by the FlatBuffers compiler, do not modify

# namespace: Sample

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Armor(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Armor()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsArmor(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Armor
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Armor
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Armor
    def Protection(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int16Flags, o + self._tab.Pos)
        return 0

def ArmorStart(builder): builder.StartObject(2)
def Start(builder):
    return ArmorStart(builder)
def ArmorAddName(builder, name): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return ArmorAddName(builder, name)
def ArmorAddProtection(builder, protection): builder.PrependInt16Slot(1, protection, 0)
def AddProtection(builder, protection):
    return ArmorAddProtection(builder, protection)
def ArmorEnd(builder): return builder.EndObject()
def End(builder):
    return ArmorEnd(builder)